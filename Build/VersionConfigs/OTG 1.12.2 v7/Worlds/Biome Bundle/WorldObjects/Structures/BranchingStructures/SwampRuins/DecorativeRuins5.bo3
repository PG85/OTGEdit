
#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 object                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This is the config file of a custom object.
# If you add this object correctly to your BiomeConfigs, it will spawn in the world.

# This is the creator of this BO3 object
Author: LordSmellyPants

# A short description of this BO3 object
Description: No description given

# The BO3 version, don't change this! It can be used by external applications to do a version check.
Version: 3

# The settings mode, WriteAll, WriteWithoutComments or WriteDisable. See WorldConfig.
SettingsMode: WriteDisable


#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Main settings                          | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This needs to be set to true to spawn the object in the Tree and Sapling resources.
Tree: true

# The frequency of the BO3 from 1 to 200. Tries this many times to spawn this BO3 when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Frequency: 1

# The rarity of the BO3 from 0 to 100. Each spawn attempt has rarity% chance to succeed when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Rarity: 0.5

# If you set this to true, the BO3 will be placed with a random rotation.
RotateRandomly: false

# The spawn height of the BO3 - randomY, highestBlock or highestSolidBlock.
SpawnHeight: highestSolidBlock

# The height limits for the BO3.
MinHeight: 0

MaxHeight: 256

# Objects can have other objects attacthed to it: branches. Branches can also
# have branches attached to it, which can also have branches, etc. This is the
# maximum branch depth for this objects.
MaxBranchDepth: 10

# When spawned with the UseWorld keyword, this BO3 should NOT spawn in the following biomes.
# If you writer.write the BO3 name directly in the BiomeConfigs, this will be ignored.
ExcludedBiomes: All


#######################################################################
# +-----------------------------------------------------------------+ #
# |                      Source block settings                      | #
# +-----------------------------------------------------------------+ #
#######################################################################

# The B(s) the BO3 should spawn in.
SourceBlocks: AIR,STONE,DIRT,GRASS,DIRT:2,HARD_CLAY,CLAY,STONE:1,STONE:3,STONE:5,SAND,GRAVEL,COBBLESTONE,MOSSY_COBBLESTONE

# The maximum percentage of the BO3 that can be outside the SourceBlock.
# The BO3 won't be placed on a location with more blocks outside the SourceBlock than this percentage.
MaxPercentageOutsideSourceBlock: 10

# What to do when a block is about to be placed outside the SourceBlock? (dontPlace, placeAnyway)
OutsideSourceBlock: placeAnyway


#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# All the blocks used in the BO3 are listed here. Possible blocks:
# B(x,y,z,id[.data][,nbtfile.nbt)
# RB(x,y,z,id[:data][,nbtfile.nbt],chance[,id[:data][,nbtfile.nbt],chance[,...]])
# So RB(0,0,0,CHEST,chest.nbt,50,CHEST,anotherchest.nbt,100) will spawn a chest at
# the BO3 origin, and give it a 50% chance to have the contents of chest.nbt, or, if that
# fails, a 100% percent chance to have the contents of anotherchest.nbt.
B(-3,-9,-3,COBBLESTONE)
B(-3,-9,-2,COBBLESTONE)
B(-3,-9,-1,COBBLESTONE)
B(-3,-9,0,COBBLESTONE)
B(-3,-9,1,COBBLESTONE)
B(-3,-9,2,COBBLESTONE)
B(-3,-8,-3,COBBLESTONE)
B(-3,-8,-2,COBBLESTONE)
B(-3,-8,-1,COBBLESTONE)
B(-3,-8,0,COBBLESTONE)
B(-3,-8,1,COBBLESTONE)
B(-3,-8,2,COBBLESTONE)
B(-3,-7,-3,COBBLESTONE)
B(-3,-7,-2,COBBLESTONE)
B(-3,-7,-1,COBBLESTONE)
B(-3,-7,0,COBBLESTONE)
B(-3,-7,1,COBBLESTONE)
B(-3,-7,2,COBBLESTONE)
B(-3,-6,-3,COBBLESTONE)
B(-3,-6,-2,COBBLESTONE)
B(-3,-6,-1,COBBLESTONE)
B(-3,-6,0,COBBLESTONE)
B(-3,-6,1,COBBLESTONE)
B(-3,-6,2,COBBLESTONE)
B(-3,-5,-3,COBBLESTONE)
B(-3,-5,-2,COBBLESTONE)
B(-3,-5,-1,COBBLESTONE)
B(-3,-5,0,COBBLESTONE)
B(-3,-5,1,COBBLESTONE)
B(-3,-5,2,COBBLESTONE)
B(-3,-4,-3,COBBLESTONE)
B(-3,-4,-2,COBBLESTONE)
B(-3,-4,-1,COBBLESTONE)
B(-3,-4,0,COBBLESTONE)
B(-3,-4,1,COBBLESTONE)
B(-3,-4,2,COBBLESTONE)
B(-3,-3,-3,COBBLESTONE)
B(-3,-3,-2,COBBLESTONE)
B(-3,-3,-1,COBBLESTONE)
B(-3,-3,0,COBBLESTONE)
B(-3,-3,1,COBBLESTONE)
B(-3,-3,2,COBBLESTONE)
B(-3,-2,-3,COBBLESTONE)
B(-3,-2,-2,COBBLESTONE)
B(-3,-2,-1,COBBLESTONE)
B(-3,-2,0,COBBLESTONE)
B(-3,-2,1,COBBLESTONE)
B(-3,-2,2,COBBLESTONE)
B(-3,-1,-3,COBBLESTONE)
B(-3,-1,-2,COBBLESTONE)
B(-3,-1,-1,COBBLESTONE)
B(-3,-1,0,COBBLESTONE)
B(-3,-1,1,COBBLESTONE)
B(-3,-1,2,COBBLESTONE)
B(-3,0,-3,STEP:3)
B(-3,0,-2,STEP:3)
B(-3,0,-1,WOOD_STEP:1)
B(-3,0,1,STEP:3)
B(-2,-9,-3,COBBLESTONE)
B(-2,-9,-2,COBBLESTONE)
B(-2,-9,-1,COBBLESTONE)
B(-2,-9,0,COBBLESTONE)
B(-2,-9,1,COBBLESTONE)
B(-2,-9,2,COBBLESTONE)
B(-2,-8,-3,COBBLESTONE)
B(-2,-8,-2,COBBLESTONE)
B(-2,-8,-1,COBBLESTONE)
B(-2,-8,0,COBBLESTONE)
B(-2,-8,1,COBBLESTONE)
B(-2,-8,2,COBBLESTONE)
B(-2,-7,-3,COBBLESTONE)
B(-2,-7,-2,COBBLESTONE)
B(-2,-7,-1,COBBLESTONE)
B(-2,-7,0,COBBLESTONE)
B(-2,-7,1,COBBLESTONE)
B(-2,-7,2,COBBLESTONE)
B(-2,-6,-3,COBBLESTONE)
B(-2,-6,-2,COBBLESTONE)
B(-2,-6,-1,COBBLESTONE)
B(-2,-6,0,COBBLESTONE)
B(-2,-6,1,COBBLESTONE)
B(-2,-6,2,COBBLESTONE)
B(-2,-5,-3,COBBLESTONE)
B(-2,-5,-2,COBBLESTONE)
B(-2,-5,-1,COBBLESTONE)
B(-2,-5,0,COBBLESTONE)
B(-2,-5,1,COBBLESTONE)
B(-2,-5,2,COBBLESTONE)
B(-2,-4,-3,COBBLESTONE)
B(-2,-4,-2,COBBLESTONE)
B(-2,-4,-1,COBBLESTONE)
B(-2,-4,0,COBBLESTONE)
B(-2,-4,1,COBBLESTONE)
B(-2,-4,2,COBBLESTONE)
B(-2,-3,-3,COBBLESTONE)
B(-2,-3,-2,COBBLESTONE)
B(-2,-3,-1,COBBLESTONE)
B(-2,-3,0,COBBLESTONE)
B(-2,-3,1,COBBLESTONE)
B(-2,-3,2,COBBLESTONE)
B(-2,-2,-3,COBBLESTONE)
B(-2,-2,-2,COBBLESTONE)
B(-2,-2,-1,COBBLESTONE)
B(-2,-2,0,COBBLESTONE)
B(-2,-2,1,COBBLESTONE)
B(-2,-2,2,COBBLESTONE)
B(-2,-1,-3,COBBLESTONE)
B(-2,-1,-2,COBBLESTONE)
B(-2,-1,-1,COBBLESTONE)
B(-2,-1,0,COBBLESTONE)
B(-2,-1,1,COBBLESTONE)
B(-2,-1,2,COBBLESTONE)
B(-2,0,-2,SMOOTH_BRICK:1)
B(-2,0,-1,COBBLESTONE_STAIRS:0)
B(-2,0,0,COBBLESTONE_STAIRS:0)
B(-2,0,1,STEP:3)
B(-2,0,2,SMOOTH_BRICK:2)
B(-2,1,-2,COBBLE_WALL)
B(-2,1,2,COBBLE_WALL)
B(-2,7,0,COBBLE_WALL)
B(-2,8,0,SKULL:1)
B(-1,-9,-3,COBBLESTONE)
B(-1,-9,-2,COBBLESTONE)
B(-1,-9,-1,COBBLESTONE)
B(-1,-9,0,COBBLESTONE)
B(-1,-9,1,COBBLESTONE)
B(-1,-9,2,COBBLESTONE)
B(-1,-8,-3,COBBLESTONE)
B(-1,-8,-2,COBBLESTONE)
B(-1,-8,-1,COBBLESTONE)
B(-1,-8,0,COBBLESTONE)
B(-1,-8,1,COBBLESTONE)
B(-1,-8,2,COBBLESTONE)
B(-1,-7,-3,COBBLESTONE)
B(-1,-7,-2,COBBLESTONE)
B(-1,-7,-1,COBBLESTONE)
B(-1,-7,0,COBBLESTONE)
B(-1,-7,1,COBBLESTONE)
B(-1,-7,2,COBBLESTONE)
B(-1,-6,-3,COBBLESTONE)
B(-1,-6,-2,COBBLESTONE)
B(-1,-6,-1,COBBLESTONE)
B(-1,-6,0,COBBLESTONE)
B(-1,-6,1,COBBLESTONE)
B(-1,-6,2,COBBLESTONE)
B(-1,-5,-3,COBBLESTONE)
B(-1,-5,-2,COBBLESTONE)
B(-1,-5,-1,COBBLESTONE)
B(-1,-5,0,COBBLESTONE)
B(-1,-5,1,COBBLESTONE)
B(-1,-5,2,COBBLESTONE)
B(-1,-4,-3,COBBLESTONE)
B(-1,-4,-2,COBBLESTONE)
B(-1,-4,-1,COBBLESTONE)
B(-1,-4,0,COBBLESTONE)
B(-1,-4,1,COBBLESTONE)
B(-1,-4,2,COBBLESTONE)
B(-1,-3,-3,COBBLESTONE)
B(-1,-3,-2,COBBLESTONE)
B(-1,-3,-1,COBBLESTONE)
B(-1,-3,0,COBBLESTONE)
B(-1,-3,1,COBBLESTONE)
B(-1,-3,2,COBBLESTONE)
B(-1,-2,-3,COBBLESTONE)
B(-1,-2,-2,COBBLESTONE)
B(-1,-2,-1,COBBLESTONE)
B(-1,-2,0,COBBLESTONE)
B(-1,-2,1,COBBLESTONE)
B(-1,-2,2,COBBLESTONE)
B(-1,-1,-3,COBBLESTONE)
B(-1,-1,-2,COBBLESTONE)
B(-1,-1,-1,COBBLESTONE)
B(-1,-1,0,COBBLESTONE)
B(-1,-1,1,COBBLESTONE)
B(-1,-1,2,COBBLESTONE)
B(-1,0,-2,STEP:3)
B(-1,0,-1,STEP:3)
B(-1,0,0,LEAVES:1)
B(-1,0,1,LOG:1)
B(-1,0,2,COBBLESTONE_STAIRS:3)
B(-1,1,0,VINE:8)
B(-1,1,1,LEAVES:1)
B(-1,2,0,VINE:8)
B(-1,3,0,VINE:8)
B(-1,4,0,VINE:8)
B(-1,5,0,VINE:8)
B(-1,6,0,VINE:8)
B(-1,7,0,SMOOTH_BRICK)
B(0,-9,-3,COBBLESTONE)
B(0,-9,-2,COBBLESTONE)
B(0,-9,-1,COBBLESTONE)
B(0,-9,0,COBBLESTONE)
B(0,-9,1,COBBLESTONE)
B(0,-9,2,COBBLESTONE)
B(0,-8,-3,COBBLESTONE)
B(0,-8,-2,COBBLESTONE)
B(0,-8,-1,COBBLESTONE)
B(0,-8,0,COBBLESTONE)
B(0,-8,1,COBBLESTONE)
B(0,-8,2,COBBLESTONE)
B(0,-7,-3,COBBLESTONE)
B(0,-7,-2,COBBLESTONE)
B(0,-7,-1,COBBLESTONE)
B(0,-7,0,COBBLESTONE)
B(0,-7,1,COBBLESTONE)
B(0,-7,2,COBBLESTONE)
B(0,-6,-3,COBBLESTONE)
B(0,-6,-2,COBBLESTONE)
B(0,-6,-1,COBBLESTONE)
B(0,-6,0,COBBLESTONE)
B(0,-6,1,COBBLESTONE)
B(0,-6,2,COBBLESTONE)
B(0,-5,-3,COBBLESTONE)
B(0,-5,-2,COBBLESTONE)
B(0,-5,-1,COBBLESTONE)
B(0,-5,0,COBBLESTONE)
B(0,-5,1,COBBLESTONE)
B(0,-5,2,COBBLESTONE)
B(0,-4,-3,COBBLESTONE)
B(0,-4,-2,COBBLESTONE)
B(0,-4,-1,COBBLESTONE)
B(0,-4,0,COBBLESTONE)
B(0,-4,1,COBBLESTONE)
B(0,-4,2,COBBLESTONE)
B(0,-3,-3,COBBLESTONE)
B(0,-3,-2,COBBLESTONE)
B(0,-3,-1,COBBLESTONE)
B(0,-3,0,COBBLESTONE)
B(0,-3,1,COBBLESTONE)
B(0,-3,2,COBBLESTONE)
B(0,-2,-3,COBBLESTONE)
B(0,-2,-2,COBBLESTONE)
B(0,-2,-1,COBBLESTONE)
B(0,-2,0,COBBLESTONE)
B(0,-2,1,COBBLESTONE)
B(0,-2,2,COBBLESTONE)
B(0,-1,-3,COBBLESTONE)
B(0,-1,-2,COBBLESTONE)
B(0,-1,-1,COBBLESTONE)
B(0,-1,0,COBBLESTONE)
B(0,-1,1,COBBLESTONE)
B(0,-1,2,COBBLESTONE)
B(0,0,-2,COBBLESTONE_STAIRS:2)
B(0,0,-1,STEP:3)
B(0,0,0,SMOOTH_BRICK:2)
B(0,0,1,STEP:3)
B(0,0,2,COBBLESTONE_STAIRS:3)
B(0,1,-2,VINE:1)
B(0,1,0,SMOOTH_BRICK:2)
B(0,1,1,VINE:4)
B(0,2,-2,VINE:1)
B(0,2,0,SMOOTH_BRICK:1)
B(0,2,1,VINE:4)
B(0,3,-2,VINE:1)
B(0,3,0,SMOOTH_BRICK:1)
B(0,3,1,VINE:4)
B(0,4,-2,VINE:1)
B(0,4,0,SMOOTH_BRICK:3)
B(0,4,1,VINE:4)
B(0,5,-2,VINE:1)
B(0,5,0,SMOOTH_BRICK)
B(0,5,1,VINE:4)
B(0,6,-2,VINE:1)
B(0,6,0,SMOOTH_BRICK:3)
B(0,6,1,VINE:4)
B(0,7,-2,VINE:1)
B(0,7,-1,SMOOTH_BRICK:2)
B(0,7,0,SMOOTH_BRICK:1)
B(0,7,1,SMOOTH_BRICK:1)
B(0,7,2,COBBLE_WALL)
B(0,8,0,COBBLE_WALL)
B(1,-9,-3,COBBLESTONE)
B(1,-9,-2,COBBLESTONE)
B(1,-9,-1,COBBLESTONE)
B(1,-9,0,COBBLESTONE)
B(1,-9,1,COBBLESTONE)
B(1,-9,2,COBBLESTONE)
B(1,-8,-3,COBBLESTONE)
B(1,-8,-2,COBBLESTONE)
B(1,-8,-1,COBBLESTONE)
B(1,-8,0,COBBLESTONE)
B(1,-8,1,COBBLESTONE)
B(1,-8,2,COBBLESTONE)
B(1,-7,-3,COBBLESTONE)
B(1,-7,-2,COBBLESTONE)
B(1,-7,-1,COBBLESTONE)
B(1,-7,0,COBBLESTONE)
B(1,-7,1,COBBLESTONE)
B(1,-7,2,COBBLESTONE)
B(1,-6,-3,COBBLESTONE)
B(1,-6,-2,COBBLESTONE)
B(1,-6,-1,COBBLESTONE)
B(1,-6,0,COBBLESTONE)
B(1,-6,1,COBBLESTONE)
B(1,-6,2,COBBLESTONE)
B(1,-5,-3,COBBLESTONE)
B(1,-5,-2,COBBLESTONE)
B(1,-5,-1,COBBLESTONE)
B(1,-5,0,COBBLESTONE)
B(1,-5,1,COBBLESTONE)
B(1,-5,2,COBBLESTONE)
B(1,-4,-3,COBBLESTONE)
B(1,-4,-2,COBBLESTONE)
B(1,-4,-1,COBBLESTONE)
B(1,-4,0,COBBLESTONE)
B(1,-4,1,COBBLESTONE)
B(1,-4,2,COBBLESTONE)
B(1,-3,-3,COBBLESTONE)
B(1,-3,-2,COBBLESTONE)
B(1,-3,-1,COBBLESTONE)
B(1,-3,0,COBBLESTONE)
B(1,-3,1,COBBLESTONE)
B(1,-3,2,COBBLESTONE)
B(1,-2,-3,COBBLESTONE)
B(1,-2,-2,COBBLESTONE)
B(1,-2,-1,COBBLESTONE)
B(1,-2,0,COBBLESTONE)
B(1,-2,1,COBBLESTONE)
B(1,-2,2,COBBLESTONE)
B(1,-1,-3,COBBLESTONE)
B(1,-1,-2,COBBLESTONE)
B(1,-1,-1,COBBLESTONE)
B(1,-1,0,COBBLESTONE)
B(1,-1,1,COBBLESTONE)
B(1,-1,2,COBBLESTONE)
B(1,0,-3,STEP:3)
B(1,0,-2,COBBLESTONE_STAIRS:2)
B(1,0,-1,STEP:3)
B(1,0,0,STEP:3)
B(1,0,1,STEP:3)
B(1,0,2,COBBLESTONE_STAIRS:3)
B(1,1,-1,VINE:1)
B(1,1,1,VINE:4)
B(1,2,-1,VINE:1)
B(1,2,1,VINE:4)
B(1,3,-1,VINE:1)
B(1,3,1,VINE:4)
B(1,4,-1,VINE:1)
B(1,4,1,VINE:4)
B(1,5,-1,VINE:1)
B(1,5,1,VINE:4)
B(1,6,-1,VINE:1)
B(1,6,1,VINE:4)
B(1,7,-1,VINE:1)
B(1,7,0,SMOOTH_BRICK:2)
B(1,7,1,VINE:4)
B(2,-9,-3,COBBLESTONE)
B(2,-9,-2,COBBLESTONE)
B(2,-9,-1,COBBLESTONE)
B(2,-9,0,COBBLESTONE)
B(2,-9,1,COBBLESTONE)
B(2,-9,2,COBBLESTONE)
B(2,-8,-3,COBBLESTONE)
B(2,-8,-2,COBBLESTONE)
B(2,-8,-1,COBBLESTONE)
B(2,-8,0,COBBLESTONE)
B(2,-8,1,COBBLESTONE)
B(2,-8,2,COBBLESTONE)
B(2,-7,-3,COBBLESTONE)
B(2,-7,-2,COBBLESTONE)
B(2,-7,-1,COBBLESTONE)
B(2,-7,0,COBBLESTONE)
B(2,-7,1,COBBLESTONE)
B(2,-7,2,COBBLESTONE)
B(2,-6,-3,COBBLESTONE)
B(2,-6,-2,COBBLESTONE)
B(2,-6,-1,COBBLESTONE)
B(2,-6,0,COBBLESTONE)
B(2,-6,1,COBBLESTONE)
B(2,-6,2,COBBLESTONE)
B(2,-5,-3,COBBLESTONE)
B(2,-5,-2,COBBLESTONE)
B(2,-5,-1,COBBLESTONE)
B(2,-5,0,COBBLESTONE)
B(2,-5,1,COBBLESTONE)
B(2,-5,2,COBBLESTONE)
B(2,-4,-3,COBBLESTONE)
B(2,-4,-2,COBBLESTONE)
B(2,-4,-1,COBBLESTONE)
B(2,-4,0,COBBLESTONE)
B(2,-4,1,COBBLESTONE)
B(2,-4,2,COBBLESTONE)
B(2,-3,-3,COBBLESTONE)
B(2,-3,-2,COBBLESTONE)
B(2,-3,-1,COBBLESTONE)
B(2,-3,0,COBBLESTONE)
B(2,-3,1,COBBLESTONE)
B(2,-3,2,COBBLESTONE)
B(2,-2,-3,COBBLESTONE)
B(2,-2,-2,COBBLESTONE)
B(2,-2,-1,COBBLESTONE)
B(2,-2,0,COBBLESTONE)
B(2,-2,1,COBBLESTONE)
B(2,-2,2,COBBLESTONE)
B(2,-1,-3,COBBLESTONE)
B(2,-1,-2,COBBLESTONE)
B(2,-1,-1,COBBLESTONE)
B(2,-1,0,COBBLESTONE)
B(2,-1,1,COBBLESTONE)
B(2,-1,2,COBBLESTONE)
B(2,0,-2,SMOOTH_BRICK:2)
B(2,0,-1,LOG:1)
B(2,0,0,STEP:3)
B(2,0,1,COBBLESTONE_STAIRS:1)
B(2,0,2,SMOOTH_BRICK:2)
B(2,1,-1,LEAVES:1)
RB(2,1,2,FLOWER_POT,../../nbt/Misc/FlowerPot1.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot2.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot3.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot8.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot4.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot5.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot6.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot7.nbt,20,FLOWER_POT,../../nbt/Misc/FlowerPot8.nbt,100)
B(2,7,0,COBBLE_WALL)
B(2,8,0,SKULL:1)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 checks                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Require a condition at a certain location in order for the BO3 to be spawned.
# BlockCheck(x,y,z,BlockName[,BlockName[,...]]) - one of the blocks must be at the location
# BlockCheckNot(x,y,z,BlockName[,BlockName[,...]]) - all the blocks must not be at the location
# LightCheck(x,y,z,minLightLevel,maxLightLevel) - light must be between min and max (inclusive)

# You can use "Solid" as a BlockName for matching all solid blocks or "All" to match all blocks that aren't air.

# Examples:
#   BlockCheck(0,-1,0,GRASS,DIRT)  Require grass or dirt just below the object
#   BlockCheck(0,-1,0,Solid)       Require any solid block just below the object
#   BlockCheck(0,-1,0,WOOL)        Require any type of wool just below the object
#   BlockCheck(0,-1,0,WOOL:0)      Require white wool just below the object
#   BlockCheckNot(0,0,0,WOOL:0)   Require that there is no white wool below the object
#   LightCheck(0,0,0,0,1)          Require almost complete darkness just below the object

BlockCheck(0,-1,0,GRASS,DIRT,DIRT:2,STONE,GRAVEL,CLAY,HARD_CLAY,SAND,COBBLESTONE)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                             Branches                            | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Branches are objects that will spawn when this object spawns when it is used in
# the CustomStructure resource. Branches can also have branches, making complex
# structures possible. See the wiki for more details.

# Regular Branches spawn each branch with an independent chance of spawning.
# Branch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][IndividualChance])
# branchName - name of the object to spawn.
# rotation - NORTH, SOUTH, EAST or WEST.
# IndividualChance - The chance each branch has to spawn, assumed to be 100 when left blank

# Weighted Branches spawn branches with a dependent chance of spawning.
# WBR(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][MaxChanceOutOf])
# MaxChanceOutOf - The chance all branches have to spawn out of, assumed to be 100 when left blank
