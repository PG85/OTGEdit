
#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 object                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This is the config file of a custom object.
# If you add this object correctly to your BiomeConfigs, it will spawn in the world.

# This is the creator of this BO3 object
Author: LordSmellyPants

# A short description of this BO3 object
Description: Converted version of the BO2 RedCapL

# The BO3 version, don't change this! It can be used by external applications to do a version check.
Version: 3

# The settings mode, WriteAll, WriteWithoutComments or WriteDisable. See WorldConfig.
SettingsMode: WriteDisable


#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Main settings                          | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This needs to be set to true to spawn the object in the Tree and Sapling resources.
Tree: false

# The frequency of the BO3 from 1 to 200. Tries this many times to spawn this BO3 when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Frequency: 1

# The rarity of the BO3 from 0 to 100. Each spawn attempt has rarity% chance to succeed when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Rarity: 10.0

# If you set this to true, the BO3 will be placed with a random rotation.
RotateRandomly: true

# The spawn height of the BO3 - randomY, highestBlock or highestSolidBlock.
SpawnHeight: highestSolidBlock

# The height limits for the BO3.
MinHeight: 50

MaxHeight: 150

# Objects can have other objects attacthed to it: branches. Branches can also
# have branches attached to it, which can also have branches, etc. This is the
# maximum branch depth for this objects.
MaxBranchDepth: 10

# When spawned with the UseWorld keyword, this BO3 should NOT spawn in the following biomes.
# If you writer.write the BO3 name directly in the BiomeConfigs, this will be ignored.
ExcludedBiomes: All 


#######################################################################
# +-----------------------------------------------------------------+ #
# |                      Source block settings                      | #
# +-----------------------------------------------------------------+ #
#######################################################################

# The block(s) the BO3 should spawn in.
SourceBlocks: AIR

# The maximum percentage of the BO3 that can be outside the SourceBlock.
# The BO3 won't be placed on a location with more blocks outside the SourceBlock than this percentage.
MaxPercentageOutsideSourceBlock: 60

# What to do when a block is about to be placed outside the SourceBlock? (dontPlace, placeAnyway)
OutsideSourceBlock: placeAnyway


#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# All the blocks used in the BO3 are listed here. Possible blocks:
# Block(x,y,z,id[.data][,nbtfile.nbt)
# RandomBlock(x,y,z,id[:data][,nbtfile.nbt],chance[,id[:data][,nbtfile.nbt],chance[,...]])
# So RandomBlock(0,0,0,CHEST,chest.nbt,50,CHEST,anotherchest.nbt,100) will spawn a chest at
# the BO3 origin, and give it a 50% chance to have the contents of chest.nbt, or, if that
# fails, a 100% percent chance to have the contents of anotherchest.nbt.
Block(3,8,-3,HUGE_MUSHROOM_2:14)
Block(6,6,1,HUGE_MUSHROOM_2:14)
Block(3,11,-4,HUGE_MUSHROOM_2:14)
Block(1,6,-4,HUGE_MUSHROOM_1:10)
Block(-2,13,-3,HUGE_MUSHROOM_2:14)
Block(-2,12,-3,HUGE_MUSHROOM_2:14)
Block(1,4,-4,HUGE_MUSHROOM_1:10)
Block(1,5,-4,HUGE_MUSHROOM_1:10)
Block(1,2,-4,HUGE_MUSHROOM_1:10)
Block(1,3,-4,HUGE_MUSHROOM_1:10)
Block(2,6,2,HUGE_MUSHROOM_2:14)
Block(1,0,-4,HUGE_MUSHROOM_1:10)
Block(1,1,-4,HUGE_MUSHROOM_1:10)
Block(-3,13,-2,HUGE_MUSHROOM_2:14)
Block(-3,12,-2,HUGE_MUSHROOM_2:14)
Block(-4,12,-1,HUGE_MUSHROOM_2:14)
Block(-4,11,-1,HUGE_MUSHROOM_2:14)
Block(-1,12,1,HUGE_MUSHROOM_2:14)
Block(7,7,-2,HUGE_MUSHROOM_2:14)
Block(7,6,-2,HUGE_MUSHROOM_2:14)
Block(3,8,0,HUGE_MUSHROOM_2:14)
Block(2,1,1,HUGE_MUSHROOM_1:10)
Block(-2,11,-3,AIR)
Block(2,0,1,HUGE_MUSHROOM_1:10)
Block(2,12,-5,HUGE_MUSHROOM_2:14)
Block(2,11,-5,HUGE_MUSHROOM_2:14)
Block(1,12,1,HUGE_MUSHROOM_2:14)
Block(5,7,-3,HUGE_MUSHROOM_2:14)
Block(5,8,-3,HUGE_MUSHROOM_2:14)
Block(3,6,-2,HUGE_MUSHROOM_1:10)
Block(3,7,-2,HUGE_MUSHROOM_1:10)
Block(0,7,-1,HUGE_MUSHROOM_2:14)
Block(3,8,-2,HUGE_MUSHROOM_2:14)
Block(0,6,-1,HUGE_MUSHROOM_2:14)
Block(6,7,0,HUGE_MUSHROOM_2:14)
Block(6,6,0,HUGE_MUSHROOM_2:14)
Block(-2,12,-4,HUGE_MUSHROOM_2:14)
Block(3,5,-2,HUGE_MUSHROOM_1:10)
Block(1,7,-3,HUGE_MUSHROOM_2:14)
Block(1,5,-3,HUGE_MUSHROOM_1:10)
Block(0,11,-6,HUGE_MUSHROOM_2:14)
Block(1,6,-3,HUGE_MUSHROOM_1:10)
Block(1,11,2,HUGE_MUSHROOM_2:14)
Block(1,3,-3,HUGE_MUSHROOM_1:10)
Block(1,12,2,HUGE_MUSHROOM_2:14)
Block(1,4,-3,HUGE_MUSHROOM_1:10)
Block(1,13,-1,HUGE_MUSHROOM_2:14)
Block(0,12,-6,HUGE_MUSHROOM_2:14)
Block(3,4,0,HUGE_MUSHROOM_1:10)
Block(3,3,0,HUGE_MUSHROOM_1:10)
Block(7,7,-3,HUGE_MUSHROOM_2:14)
Block(3,2,0,HUGE_MUSHROOM_1:10)
Block(7,6,-3,HUGE_MUSHROOM_2:14)
Block(3,1,0,HUGE_MUSHROOM_1:10)
Block(3,7,1,HUGE_MUSHROOM_2:14)
Block(3,6,1,HUGE_MUSHROOM_2:14)
Block(4,11,-2,HUGE_MUSHROOM_2:14)
Block(3,8,1,HUGE_MUSHROOM_2:14)
Block(-1,9,-2,HUGE_MUSHROOM_1:10)
Block(-1,8,-2,HUGE_MUSHROOM_1:10)
Block(1,11,-6,HUGE_MUSHROOM_2:14)
Block(-1,13,-4,HUGE_MUSHROOM_2:14)
Block(-1,12,-4,HUGE_MUSHROOM_2:14)
Block(-3,12,-3,HUGE_MUSHROOM_2:14)
Block(5,6,-4,HUGE_MUSHROOM_2:14)
Block(-1,12,2,HUGE_MUSHROOM_2:14)
Block(5,7,-4,HUGE_MUSHROOM_2:14)
Block(-1,11,2,HUGE_MUSHROOM_2:14)
Block(0,13,-1,HUGE_MUSHROOM_2:14)
Block(3,6,-5,HUGE_MUSHROOM_2:14)
Block(3,7,-5,HUGE_MUSHROOM_2:14)
Block(0,6,0,HUGE_MUSHROOM_2:14)
Block(-2,12,0,HUGE_MUSHROOM_2:14)
Block(1,8,-2,HUGE_MUSHROOM_2:14)
Block(1,6,-2,HUGE_MUSHROOM_2:14)
Block(1,7,-2,HUGE_MUSHROOM_2:14)
Block(4,7,-5,HUGE_MUSHROOM_2:14)
Block(4,6,-5,HUGE_MUSHROOM_2:14)
Block(3,0,1,HUGE_MUSHROOM_1:10)
Block(3,6,2,HUGE_MUSHROOM_2:14)
Block(-4,11,-3,HUGE_MUSHROOM_2:14)
Block(-4,12,-3,HUGE_MUSHROOM_2:14)
Block(-3,11,-4,HUGE_MUSHROOM_2:14)
Block(3,7,2,HUGE_MUSHROOM_2:14)
Block(3,11,-3,HUGE_MUSHROOM_2:14)
Block(4,11,0,HUGE_MUSHROOM_2:14)
Block(3,12,-3,HUGE_MUSHROOM_2:14)
Block(4,7,0,HUGE_MUSHROOM_1:10)
Block(-1,12,-6,HUGE_MUSHROOM_2:14)
Block(1,12,-4,HUGE_MUSHROOM_2:14)
Block(4,6,0,HUGE_MUSHROOM_1:10)
Block(4,8,0,HUGE_MUSHROOM_2:14)
Block(-1,11,-6,HUGE_MUSHROOM_2:14)
Block(2,8,-1,HUGE_MUSHROOM_2:14)
Block(2,7,-1,HUGE_MUSHROOM_1:10)
Block(5,6,-5,HUGE_MUSHROOM_2:14)
Block(2,6,-1,HUGE_MUSHROOM_1:10)
Block(-1,12,0,HUGE_MUSHROOM_2:14)
Block(-1,13,0,HUGE_MUSHROOM_2:14)
Block(2,11,2,HUGE_MUSHROOM_2:14)
Block(3,7,-4,HUGE_MUSHROOM_2:14)
Block(3,8,-4,HUGE_MUSHROOM_2:14)
Block(3,0,-4,HUGE_MUSHROOM_1:10)
Block(1,11,-5,HUGE_MUSHROOM_2:14)
Block(-1,12,-5,HUGE_MUSHROOM_2:14)
Block(1,12,-5,HUGE_MUSHROOM_2:14)
Block(2,12,-4,HUGE_MUSHROOM_2:14)
Block(4,6,-4,HUGE_MUSHROOM_2:14)
Block(1,7,-1,HUGE_MUSHROOM_2:14)
Block(2,11,-4,HUGE_MUSHROOM_2:14)
Block(1,8,-1,HUGE_MUSHROOM_2:14)
Block(4,7,-4,HUGE_MUSHROOM_2:14)
Block(7,6,-1,HUGE_MUSHROOM_2:14)
Block(-3,12,-4,HUGE_MUSHROOM_2:14)
Block(1,0,-1,HUGE_MUSHROOM_1:10)
Block(3,11,1,HUGE_MUSHROOM_2:14)
Block(3,12,1,HUGE_MUSHROOM_2:14)
Block(-2,11,-5,HUGE_MUSHROOM_2:14)
Block(-2,12,-5,HUGE_MUSHROOM_2:14)
Block(4,7,1,HUGE_MUSHROOM_2:14)
Block(2,8,-2,HUGE_MUSHROOM_2:14)
Block(0,12,-5,HUGE_MUSHROOM_2:14)
Block(6,7,-2,HUGE_MUSHROOM_2:14)
Block(-4,11,-4,HUGE_MUSHROOM_2:14)
Block(0,6,-4,HUGE_MUSHROOM_1:10)
Block(-3,11,-5,HUGE_MUSHROOM_2:14)
Block(-3,12,-5,HUGE_MUSHROOM_2:14)
Block(1,8,0,HUGE_MUSHROOM_2:14)
Block(0,7,-4,HUGE_MUSHROOM_1:10)
Block(1,7,0,HUGE_MUSHROOM_2:14)
Block(-2,11,-6,HUGE_MUSHROOM_2:14)
Block(0,0,-4,HUGE_MUSHROOM_1:10)
Block(2,12,-2,HUGE_MUSHROOM_2:14)
Block(0,12,1,HUGE_MUSHROOM_2:14)
Block(4,7,-3,HUGE_MUSHROOM_2:14)
Block(1,12,-3,HUGE_MUSHROOM_2:14)
Block(1,13,-3,HUGE_MUSHROOM_2:14)
Block(4,8,-3,HUGE_MUSHROOM_2:14)
Block(0,12,-4,HUGE_MUSHROOM_2:14)
Block(0,13,-4,HUGE_MUSHROOM_2:14)
Block(-1,10,-2,HUGE_MUSHROOM_1:10)
Block(-1,11,-2,HUGE_MUSHROOM_1:10)
Block(4,7,2,HUGE_MUSHROOM_2:14)
Block(4,6,2,HUGE_MUSHROOM_2:14)
Block(2,7,-3,HUGE_MUSHROOM_2:14)
Block(5,7,0,HUGE_MUSHROOM_2:14)
Block(5,6,0,HUGE_MUSHROOM_2:14)
Block(2,8,-3,HUGE_MUSHROOM_2:14)
Block(6,6,-1,HUGE_MUSHROOM_2:14)
Block(6,7,-1,HUGE_MUSHROOM_2:14)
Block(1,7,1,HUGE_MUSHROOM_2:14)
Block(1,6,1,HUGE_MUSHROOM_2:14)
Block(3,11,-2,HUGE_MUSHROOM_2:14)
Block(3,12,-2,HUGE_MUSHROOM_2:14)
Block(3,0,-6,HUGE_MUSHROOM_1:10)
Block(3,1,-6,HUGE_MUSHROOM_1:10)
Block(-2,13,-1,HUGE_MUSHROOM_2:14)
Block(4,8,-2,HUGE_MUSHROOM_2:14)
Block(4,7,-2,HUGE_MUSHROOM_1:10)
Block(4,6,-2,AIR)
Block(-3,11,0,HUGE_MUSHROOM_2:14)
Block(2,11,1,HUGE_MUSHROOM_2:14)
Block(-3,12,0,HUGE_MUSHROOM_2:14)
Block(2,12,1,HUGE_MUSHROOM_2:14)
Block(-1,12,-1,HUGE_MUSHROOM_1:10)
Block(-2,12,1,HUGE_MUSHROOM_2:14)
Block(-1,13,-1,HUGE_MUSHROOM_2:14)
Block(-2,11,1,HUGE_MUSHROOM_2:14)
Block(0,13,0,HUGE_MUSHROOM_2:14)
Block(0,12,0,AIR)
Block(2,12,-3,HUGE_MUSHROOM_2:14)
Block(2,2,-4,HUGE_MUSHROOM_1:10)
Block(2,6,-4,HUGE_MUSHROOM_2:14)
Block(1,6,0,HUGE_MUSHROOM_2:14)
Block(2,4,-4,HUGE_MUSHROOM_1:10)
Block(5,7,1,HUGE_MUSHROOM_2:14)
Block(2,3,-4,HUGE_MUSHROOM_1:10)
Block(5,6,1,HUGE_MUSHROOM_2:14)
Block(3,11,0,HUGE_MUSHROOM_2:14)
Block(1,0,0,HUGE_MUSHROOM_1:10)
Block(2,7,-4,HUGE_MUSHROOM_2:14)
Block(3,12,0,HUGE_MUSHROOM_2:14)
Block(3,7,-1,HUGE_MUSHROOM_1:10)
Block(6,6,-4,HUGE_MUSHROOM_2:14)
Block(3,8,-1,HUGE_MUSHROOM_2:14)
Block(0,6,-2,HUGE_MUSHROOM_2:14)
Block(2,12,0,HUGE_MUSHROOM_2:14)
Block(0,7,-2,HUGE_MUSHROOM_2:14)
Block(3,2,-1,HUGE_MUSHROOM_1:10)
Block(3,3,-1,HUGE_MUSHROOM_1:10)
Block(3,4,-1,HUGE_MUSHROOM_1:10)
Block(3,5,-1,HUGE_MUSHROOM_1:10)
Block(6,7,-4,HUGE_MUSHROOM_2:14)
Block(3,6,-1,HUGE_MUSHROOM_1:10)
Block(-1,10,-3,HUGE_MUSHROOM_1:10)
Block(-1,12,-3,HUGE_MUSHROOM_1:10)
Block(-1,11,-3,HUGE_MUSHROOM_1:10)
Block(2,7,0,HUGE_MUSHROOM_2:14)
Block(2,6,0,AIR)
Block(4,8,-1,HUGE_MUSHROOM_2:14)
Block(2,8,0,HUGE_MUSHROOM_2:14)
Block(4,5,-1,HUGE_MUSHROOM_1:10)
Block(4,4,-1,HUGE_MUSHROOM_1:10)
Block(4,7,-1,HUGE_MUSHROOM_1:10)
Block(4,6,-1,HUGE_MUSHROOM_1:10)
Block(7,6,-4,HUGE_MUSHROOM_2:14)
Block(1,13,0,HUGE_MUSHROOM_2:14)
Block(1,12,0,HUGE_MUSHROOM_2:14)
Block(-1,13,-3,HUGE_MUSHROOM_2:14)
Block(2,13,-1,HUGE_MUSHROOM_2:14)
Block(2,12,-1,HUGE_MUSHROOM_2:14)
Block(2,1,-5,HUGE_MUSHROOM_1:10)
Block(2,0,-5,HUGE_MUSHROOM_1:10)
Block(5,8,-1,HUGE_MUSHROOM_2:14)
Block(-4,11,0,HUGE_MUSHROOM_2:14)
Block(0,11,-3,HUGE_MUSHROOM_1:10)
Block(2,3,-5,HUGE_MUSHROOM_1:10)
Block(5,6,2,HUGE_MUSHROOM_2:14)
Block(0,11,2,HUGE_MUSHROOM_2:14)
Block(2,2,-5,HUGE_MUSHROOM_1:10)
Block(0,10,-3,HUGE_MUSHROOM_1:10)
Block(-3,12,-1,HUGE_MUSHROOM_2:14)
Block(0,12,2,HUGE_MUSHROOM_2:14)
Block(-4,12,-2,HUGE_MUSHROOM_2:14)
Block(-3,13,-1,HUGE_MUSHROOM_2:14)
Block(-4,11,-2,HUGE_MUSHROOM_2:14)
Block(0,13,-3,HUGE_MUSHROOM_2:14)
Block(2,6,-5,HUGE_MUSHROOM_2:14)
Block(6,6,-3,HUGE_MUSHROOM_2:14)
Block(-3,12,1,HUGE_MUSHROOM_2:14)
Block(6,7,-3,HUGE_MUSHROOM_2:14)
Block(0,5,-3,HUGE_MUSHROOM_1:10)
Block(-3,11,1,HUGE_MUSHROOM_2:14)
Block(0,7,-3,HUGE_MUSHROOM_1:10)
Block(0,6,-3,HUGE_MUSHROOM_1:10)
Block(0,9,-3,HUGE_MUSHROOM_1:10)
Block(0,8,-3,HUGE_MUSHROOM_1:10)
Block(-1,12,-2,HUGE_MUSHROOM_1:10)
Block(-1,13,-2,HUGE_MUSHROOM_2:14)
Block(-2,11,2,HUGE_MUSHROOM_2:14)
Block(2,6,1,HUGE_MUSHROOM_2:14)
Block(1,1,-5,HUGE_MUSHROOM_1:10)
Block(2,8,1,HUGE_MUSHROOM_2:14)
Block(2,7,1,HUGE_MUSHROOM_2:14)
Block(1,0,-5,HUGE_MUSHROOM_1:10)
Block(0,11,-2,HUGE_MUSHROOM_1:10)
Block(4,11,-1,HUGE_MUSHROOM_2:14)
Block(4,12,-1,HUGE_MUSHROOM_2:14)
Block(0,13,-2,HUGE_MUSHROOM_2:14)
Block(0,12,-2,HUGE_MUSHROOM_1:10)
Block(2,2,0,HUGE_MUSHROOM_1:10)
Block(2,1,0,HUGE_MUSHROOM_1:10)
Block(2,0,0,HUGE_MUSHROOM_1:10)
Block(-2,13,-2,HUGE_MUSHROOM_2:14)
Block(-2,12,-2,HUGE_MUSHROOM_1:10)
Block(-2,11,-2,HUGE_MUSHROOM_1:10)
Block(2,0,-6,HUGE_MUSHROOM_1:10)
Block(3,12,-1,HUGE_MUSHROOM_2:14)
Block(1,13,-2,HUGE_MUSHROOM_2:14)
Block(5,8,-2,HUGE_MUSHROOM_2:14)

Block(1,-1,-4,HUGE_MUSHROOM_1:10)
Block(2,-1,1,HUGE_MUSHROOM_1:10)
Block(3,-1,1,HUGE_MUSHROOM_1:10)
Block(3,-1,-4,HUGE_MUSHROOM_1:10)
Block(3,-1,-6,HUGE_MUSHROOM_1:10)
Block(1,-1,0,HUGE_MUSHROOM_1:10)
Block(2,-1,-5,HUGE_MUSHROOM_1:10)
Block(1,-1,-5,HUGE_MUSHROOM_1:10)
Block(2,-1,0,HUGE_MUSHROOM_1:10)
Block(2,-1,-6,HUGE_MUSHROOM_1:10

Block(1,-2,-4,HUGE_MUSHROOM_1:10)
Block(2,-2,1,HUGE_MUSHROOM_1:10)
Block(3,-2,1,HUGE_MUSHROOM_1:10)
Block(3,-2,-4,HUGE_MUSHROOM_1:10)
Block(3,-2,-6,HUGE_MUSHROOM_1:10)
Block(1,-2,0,HUGE_MUSHROOM_1:10)
Block(2,-2,-5,HUGE_MUSHROOM_1:10)
Block(1,-2,-5,HUGE_MUSHROOM_1:10)
Block(2,-2,0,HUGE_MUSHROOM_1:10)
Block(2,-2,-6,HUGE_MUSHROOM_1:10)

Block(1,-3,-4,HUGE_MUSHROOM_1:10)
Block(2,-3,1,HUGE_MUSHROOM_1:10)
Block(3,-3,1,HUGE_MUSHROOM_1:10)
Block(3,-3,-4,HUGE_MUSHROOM_1:10)
Block(3,-3,-6,HUGE_MUSHROOM_1:10)
Block(1,-3,0,HUGE_MUSHROOM_1:10)
Block(2,-3,-5,HUGE_MUSHROOM_1:10)
Block(1,-3,-5,HUGE_MUSHROOM_1:10)
Block(2,-3,0,HUGE_MUSHROOM_1:10)
Block(2,-3,-6,HUGE_MUSHROOM_1:10)

Block(1,-4,-4,HUGE_MUSHROOM_1:10)
Block(2,-4,1,HUGE_MUSHROOM_1:10)
Block(3,-4,1,HUGE_MUSHROOM_1:10)
Block(3,-4,-4,HUGE_MUSHROOM_1:10)
Block(3,-4,-6,HUGE_MUSHROOM_1:10)
Block(1,-4,0,HUGE_MUSHROOM_1:10)
Block(2,-4,-5,HUGE_MUSHROOM_1:10)
Block(1,-4,-5,HUGE_MUSHROOM_1:10)
Block(2,-4,0,HUGE_MUSHROOM_1:10)
Block(2,-4,-6,HUGE_MUSHROOM_1:10)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 checks                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Require a condition at a certain location in order for the BO3 to be spawned.
# BlockCheck(x,y,z,BlockName[,BlockName[,...]]) - one of the blocks must be at the location
# BlockCheckNot(x,y,z,BlockName[,BlockName[,...]]) - all the blocks must not be at the location
# LightCheck(x,y,z,minLightLevel,maxLightLevel) - light must be between min and max (inclusive)

# You can use "Solid" as a BlockName for matching all solid blocks or "All" to match all blocks that aren't air.

# Examples:
#   BlockCheck(0,-1,0,GRASS,DIRT)  Require grass or dirt just below the object
#   BlockCheck(0,-1,0,Solid)       Require any solid block just below the object
#   BlockCheck(0,-1,0,WOOL)        Require any type of wool just below the object
#   BlockCheck(0,-1,0,WOOL:0)      Require white wool just below the object
#   BlockCheckNot(0,0,0,WOOL:0)   Require that there is no white wool below the object
#   LightCheck(0,0,0,0,1)          Require almost complete darkness just below the object 
BlockCheck(0,-2,0,DIRT)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                             Branches                            | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Branches are objects that will spawn when this object spawns when it is used in
# the CustomStructure resource. Branches can also have branches, making complex
# structures possible. See the wiki for more details.

# Regular Branches spawn each branch with an independent chance of spawning.
# Branch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][IndividualChance])
# branchName - name of the object to spawn.
# rotation - NORTH, SOUTH, EAST or WEST.
# IndividualChance - The chance each branch has to spawn, assumed to be 100 when left blank

# Weighted Branches spawn branches with a dependent chance of spawning.
# WeightedBranch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][MaxChanceOutOf])
# MaxChanceOutOf - The chance all branches have to spawn out of, assumed to be 100 when left blank
