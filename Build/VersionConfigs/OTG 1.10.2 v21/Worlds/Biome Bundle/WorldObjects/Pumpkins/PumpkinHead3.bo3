
#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 object                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This is the config file of a custom object.
# If you add this object correctly to your BiomeConfigs, it will spawn in the world.

# This is the creator of this BO3 object
Author: LordSmellyPants

# A short description of this BO3 object
Description: Converted version of the BO2 PumpkinHead3

# The BO3 version, don't change this! It can be used by external applications to do a version check.
Version: 3

# The settings mode, WriteAll, WriteWithoutComments or WriteDisable. See WorldConfig.
SettingsMode: WriteDisable


#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Main settings                          | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This needs to be set to true to spawn the object in the Tree and Sapling resources.
Tree: true

# The frequency of the BO3 from 1 to 200. Tries this many times to spawn this BO3 when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Frequency: 1

# The rarity of the BO3 from 0 to 100. Each spawn attempt has rarity% chance to succeed when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Rarity: 3.0

# If you set this to true, the BO3 will be placed with a random rotation.
RotateRandomly: true

# The spawn height of the BO3 - atMinY, randomY, highestBlock or highestSolidBlock.
SpawnHeight: highestSolidBlock

# The offset from the spawn height to spawn this BO3
# Ex. SpawnHeight = highestSolidBlock, SpawnHeightOffset = 3; This object will spawn 3 blocks above the highest solid block
SpawnHeightOffset: 0

# A random amount to offset the spawn location from the spawn offset height
# Ex. SpawnHeightOffset = 3, SpawnHeightVariance = 3; This object will spawn 3 to 6 blocks above the original spot it would have spawned
SpawnHeightVariance: 0

##############################
# Height Limits for the BO3. #
##############################

# When in randomY mode used as the minimum Y or in atMinY mode as the actual Y to spawn this BO3 at.
MinHeight: 51

# When in randomY mode used as the maximum Y to spawn this BO3 at.
MaxHeight: 100

######################
# Extrusion settings #
######################

# The style of extrusion you wish to use - BottomDown, TopUp, None (Default)
ExtrudeMode: None

# The blocks to extrude your BO3 through
ExtrudeThroughBlocks: AIR

# Objects can have other objects attacthed to it: branches. Branches can also
# have branches attached to it, which can also have branches, etc. This is the
# maximum branch depth for this objects.
MaxBranchDepth: 10

# When spawned with the UseWorld keyword, this BO3 should NOT spawn in the following biomes.
# If you write the BO3 name directly in the BiomeConfigs, this will be ignored.
ExcludedBiomes: 


#######################################################################
# +-----------------------------------------------------------------+ #
# |                      Source block settings                      | #
# +-----------------------------------------------------------------+ #
#######################################################################

# The block(s) the BO3 should spawn in.
SourceBlocks: AIR

# The maximum percentage of the BO3 that can be outside the SourceBlock.
# The BO3 won't be placed on a location with more blocks outside the SourceBlock than this percentage.
MaxPercentageOutsideSourceBlock: 25

# What to do when a block is about to be placed outside the SourceBlock? (dontPlace, placeAnyway)
OutsideSourceBlock: placeAnyway


#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# All the blocks used in the BO3 are listed here. Possible blocks:
# Block(x,y,z,id[.data][,nbtfile.nbt)
# RandomBlock(x,y,z,id[:data][,nbtfile.nbt],chance[,id[:data][,nbtfile.nbt],chance[,...]])
#  So RandomBlock(0,0,0,CHEST,chest.nbt,50,CHEST,anotherchest.nbt,100) will spawn a chest at
#  the BO3 origin, and give it a 50% chance to have the contents of chest.nbt, or, if that
#  fails, a 100% percent chance to have the contents of anotherchest.nbt.
# MinecraftObject(x,y,z,name)
#  Spawns an object in the Mojang NBT structure format. For example, 
#  MinecraftObject(0,0,0,minecraft:igloo/igloo_bottom)
#  spawns the bottom part of an igloo.
Block(2,-3,-5,161:1)
Block(3,-3,-5,161:1)
Block(2,-3,-4,161:1)
Block(3,-3,-4,LOG_2:1)
Block(4,-3,-4,161:1)
Block(0,-3,-3,161:1)
Block(4,-3,-3,161:1)
Block(5,-3,-3,161:1)
Block(-2,-3,-2,161:1)
Block(-1,-3,-2,161:1)
Block(0,-3,-2,161:1)
Block(1,-3,-2,161:1)
Block(4,-3,-2,LOG_2:1)
Block(5,-3,-2,161:1)
Block(-3,-3,-1,161:1)
Block(-2,-3,-1,LOG_2:1)
Block(-1,-3,-1,161:1)
Block(0,-3,-1,LOG_2:1)
Block(1,-3,-1,161:1)
Block(4,-3,-1,LOG_2:9)
Block(5,-3,-1,161:1)
Block(-4,-3,0,161:1)
Block(4,-3,0,LOG_2:1)
Block(5,-3,0,LOG_2:5)
Block(-5,-3,1,161:1)
Block(-4,-3,1,LOG_2:1)
Block(-2,-3,1,LOG_2:1)
Block(0,-3,1,LOG_2:1)
Block(2,-3,1,161:1)
Block(3,-3,1,161:1)
Block(4,-3,1,161:1)
Block(-4,-3,2,161:1)
Block(2,-3,2,LOG_2:1)
Block(3,-3,2,LOG_2:1)
Block(5,-3,2,161:1)
Block(-3,-3,3,161:1)
Block(-2,-3,3,LOG_2:1)
Block(3,-3,3,LOG_2:9)
Block(4,-3,3,LOG_2:5)
Block(5,-3,3,161:1)
Block(-2,-3,4,161:1)
Block(-1,-3,4,161:1)
Block(0,-3,4,LOG_2:1)
Block(3,-3,4,LOG_2:9)
Block(4,-3,4,161:1)
Block(-1,-3,5,161:1)
Block(3,-3,5,161:1)
Block(1,-2,-5,161:1)
Block(3,-2,-5,161:1)
Block(-1,-2,-4,161:1)
Block(0,-2,-4,161:1)
Block(1,-2,-4,LOG_2:1)
Block(2,-2,-4,161:1)
Block(3,-2,-4,LOG_2:9)
Block(4,-2,-4,161:1)
Block(-2,-2,-3,161:1)
Block(-1,-2,-3,LOG_2:1)
Block(2,-2,-3,161:1)
Block(3,-2,-3,LOG_2:9)
Block(4,-2,-3,161:1)
Block(5,-2,-3,161:1)
Block(-3,-2,-2,161:1)
Block(1,-2,-2,LOG_2:1)
Block(2,-2,-2,161:1)
Block(3,-2,-2,LOG_2:9)
Block(4,-2,-2,LOG_2:5)
Block(5,-2,-2,161:1)
Block(-4,-2,-1,161:1)
Block(-3,-2,-1,LOG_2:1)
Block(-2,-2,-1,LOG_2:1)
Block(0,-2,-1,LOG_2:5)
Block(1,-2,-1,LOG_2:9)
Block(3,-2,-1,LOG_2:9)
Block(4,-2,-1,161:1)
Block(5,-2,-1,161:1)
Block(-4,-2,0,161:1)
Block(0,-2,0,LOG_2:9)
Block(1,-2,0,LOG_2:5)
Block(2,-2,0,LOG_2:1)
Block(3,-2,0,LOG_2:1)
Block(4,-2,0,LOG_2:5)
Block(5,-2,0,161:1)
Block(-5,-2,1,161:1)
Block(-4,-2,1,LOG_2:1)
Block(-2,-2,1,LOG_2:1)
Block(0,-2,1,LOG_2:9)
Block(1,-2,1,161:1)
Block(3,-2,1,LOG_2:1)
Block(4,-2,1,161:1)
Block(-5,-2,2,161:1)
Block(-4,-2,2,161:1)
Block(0,-2,2,LOG_2:1)
Block(1,-2,2,LOG_2:1)
Block(2,-2,2,LOG_2:5)
Block(3,-2,2,LOG_2:1)
Block(4,-2,2,161:1)
Block(-4,-2,3,161:1)
Block(-3,-2,3,161:1)
Block(-2,-2,3,LOG_2:9)
Block(0,-2,3,LOG_2:9)
Block(3,-2,3,LOG_2:9)
Block(4,-2,3,LOG_2:5)
Block(5,-2,3,161:1)
Block(-3,-2,4,161:1)
Block(-2,-2,4,161:1)
Block(-1,-2,4,161:1)
Block(0,-2,4,LOG_2:9)
Block(1,-2,4,161:1)
Block(2,-2,4,161:1)
Block(3,-2,4,LOG_2:9)
Block(4,-2,4,161:1)
Block(-1,-2,5,161:1)
Block(0,-2,5,161:1)
Block(2,-2,5,161:1)
Block(3,-2,5,161:1)
Block(1,-1,-5,161:1)
Block(-1,-1,-4,161:1)
Block(0,-1,-4,161:1)
Block(1,-1,-4,LOG_2:9)
Block(2,-1,-4,161:1)
Block(3,-1,-4,161:1)
Block(-3,-1,-3,161:1)
Block(-2,-1,-3,161:1)
Block(-1,-1,-3,LOG_2:9)
Block(0,-1,-3,161:1)
Block(1,-1,-3,LOG_2:9)
Block(2,-1,-3,161:1)
Block(3,-1,-3,LOG_2:9)
Block(4,-1,-3,161:1)
Block(-4,-1,-2,161:1)
Block(-3,-1,-2,161:1)
Block(-2,-1,-2,161:1)
Block(-1,-1,-2,LOG_2:1)
Block(0,-1,-2,LOG_2:1)
Block(1,-1,-2,LOG_2:1)
Block(3,-1,-2,LOG_2:9)
Block(4,-1,-2,LOG_2:5)
Block(5,-1,-2,161:1)
Block(-4,-1,-1,161:1)
Block(-3,-1,-1,LOG_2:5)
Block(-2,-1,-1,LOG_2:1)
Block(2,-1,-1,161:1)
Block(3,-1,-1,PUMPKIN:3)
Block(4,-1,-1,161:1)
Block(-5,-1,0,161:1)
Block(-4,-1,0,161:1)
Block(-2,-1,0,LOG_2:1)
Block(-1,-1,0,LOG_2:5)
Block(0,-1,0,LOG_2:1)
Block(2,-1,0,LOG_2:5)
Block(3,-1,0,LOG_2:1)
Block(4,-1,0,161:1)
Block(-5,-1,1,161:1)
Block(-4,-1,1,161:1)
Block(-3,-1,1,LOG_2:5)
Block(-2,-1,1,LOG_2:1)
Block(-1,-1,1,LOG_2:5)
Block(0,-1,1,LOG_2:1)
Block(2,-1,1,LOG_2:9)
Block(3,-1,1,PUMPKIN:3)
Block(4,-1,1,161:1)
Block(-4,-1,2,161:1)
Block(-3,-1,2,161:1)
Block(-2,-1,2,LOG_2:1)
Block(-1,-1,2,LOG_2:1)
Block(0,-1,2,LOG_2:1)
Block(1,-1,2,LOG_2:1)
Block(3,-1,2,161:1)
Block(-3,-1,3,161:1)
Block(-2,-1,3,LOG_2:9)
Block(-1,-1,3,LOG_2:9)
Block(0,-1,3,LOG_2:1)
Block(1,-1,3,LOG_2:9)
Block(3,-1,3,LOG_2:9)
Block(4,-1,3,161:1)
Block(-3,-1,4,161:1)
Block(-2,-1,4,161:1)
Block(-1,-1,4,161:1)
Block(0,-1,4,161:1)
Block(1,-1,4,161:1)
Block(3,-1,4,161:1)
Block(-3,-1,5,161:1)
Block(0,-1,5,161:1)
Block(2,-1,5,161:1)
Block(3,-1,5,161:1)
Block(-1,0,-4,WEB)
Block(1,0,-4,161:1)
Block(-1,0,-3,161:1)
Block(0,0,-3,161:1)
Block(1,0,-3,161:1)
Block(2,0,-3,161:1)
Block(3,0,-3,161:1)
Block(-3,0,-2,161:1)
Block(-2,0,-2,161:1)
Block(-1,0,-2,PUMPKIN:0)
Block(0,0,-2,PUMPKIN:0)
Block(1,0,-2,PUMPKIN:0)
Block(2,0,-2,161:1)
Block(3,0,-2,PUMPKIN:1)
Block(4,0,-2,161:1)
Block(-4,0,-1,161:1)
Block(-3,0,-1,LOG_2:5)
Block(-2,0,-1,PUMPKIN:0)
Block(-1,0,-1,PUMPKIN:0)
Block(0,0,-1,PUMPKIN:0)
Block(1,0,-1,PUMPKIN:0)
Block(2,0,-1,STAINED_CLAY:15)
Block(-4,0,0,161:1)
Block(-3,0,0,LOG_2:5)
Block(-2,0,0,PUMPKIN:0)
Block(-1,0,0,LOG_2:1)
Block(0,0,0,PUMPKIN:0)
Block(1,0,0,PUMPKIN:0)
Block(2,0,0,PUMPKIN:0)
Block(3,0,0,PUMPKIN:1)
Block(-5,0,1,161:1)
Block(-4,0,1,LOG_2:1)
Block(-2,0,1,PUMPKIN:0)
Block(-1,0,1,PUMPKIN:3)
Block(0,0,1,PUMPKIN:0)
Block(1,0,1,PUMPKIN:0)
Block(2,0,1,STAINED_CLAY:15)
Block(-4,0,2,161:1)
Block(-3,0,2,LOG_2:5)
Block(-2,0,2,PUMPKIN:0)
Block(-1,0,2,PUMPKIN:0)
Block(0,0,2,PUMPKIN:0)
Block(1,0,2,PUMPKIN:0)
Block(2,0,2,LOG_2:5)
Block(3,0,2,PUMPKIN:0)
Block(-4,0,3,161:1)
Block(-3,0,3,161:1)
Block(-2,0,3,LOG_2:9)
Block(-1,0,3,LOG_2:1)
Block(0,0,3,LOG_2:1)
Block(1,0,3,LOG_2:1)
Block(2,0,3,LOG_2:9)
Block(3,0,3,161:1)
Block(4,0,3,161:1)
Block(-2,0,4,161:1)
Block(-1,0,4,LOG_2:9)
Block(0,0,4,161:1)
Block(1,0,4,161:1)
Block(2,0,4,161:1)
Block(3,0,4,161:1)
Block(4,0,4,161:1)
Block(-1,0,5,161:1)
Block(1,0,5,161:1)
Block(2,0,5,161:1)
Block(3,0,5,161:1)
Block(1,1,-3,161:1)
Block(2,1,-3,161:1)
Block(-2,1,-2,PUMPKIN:0)
Block(-1,1,-2,PUMPKIN:0)
Block(0,1,-2,PUMPKIN:0)
Block(1,1,-2,PUMPKIN:0)
Block(2,1,-2,161:1)
Block(3,1,-2,PUMPKIN:1)
Block(-2,1,-1,PUMPKIN:0)
Block(2,1,-1,STAINED_CLAY:15)
Block(-3,1,0,PUMPKIN:0)
Block(-1,1,0,LOG_2:1)
Block(2,1,0,STAINED_CLAY:15)
Block(-4,1,1,161:1)
Block(-3,1,1,PUMPKIN:0)
Block(2,1,1,STAINED_CLAY:15)
Block(-3,1,2,161:1)
Block(-2,1,2,PUMPKIN:0)
Block(1,1,2,PUMPKIN:0)
Block(2,1,2,PUMPKIN:0)
Block(3,1,2,PUMPKIN:1)
Block(-2,1,3,161:1)
Block(-1,1,3,PUMPKIN)
Block(0,1,3,PUMPKIN)
Block(1,1,3,LOG_2:1)
Block(2,1,3,161:1)
Block(3,1,3,161:1)
Block(-1,1,4,161:1)
Block(0,1,4,LOG_2:1)
Block(1,1,4,LOG_2:1)
Block(2,1,4,161:1)
Block(3,1,4,161:1)
Block(0,1,5,161:1)
Block(1,1,5,161:1)
Block(-1,2,-3,PUMPKIN:0)
Block(0,2,-3,PUMPKIN:0)
Block(1,2,-3,PUMPKIN:0)
Block(2,2,-3,WEB)
Block(-2,2,-2,PUMPKIN:0)
Block(0,2,-2,LOG_2:5)
Block(1,2,-2,PUMPKIN:0)
Block(2,2,-2,PUMPKIN:0)
Block(3,2,-2,PUMPKIN:0)
Block(-2,2,-1,PUMPKIN:0)
Block(0,2,-1,LOG_2:9)
Block(2,2,-1,PUMPKIN:0)
Block(3,2,-1,PUMPKIN:0)
Block(-3,2,0,WEB)
Block(-2,2,0,PUMPKIN:0)
Block(-1,2,0,LOG_2:1)
Block(1,2,0,WEB)
Block(3,2,0,PUMPKIN:0)
Block(-3,2,1,PUMPKIN:0)
Block(1,2,1,STAINED_CLAY:15)
Block(2,2,1,PUMPKIN:0)
Block(3,2,1,PUMPKIN:0)
Block(-3,2,2,PUMPKIN)
Block(-2,2,2,PUMPKIN:1)
Block(0,2,2,LOG_2:5)
Block(1,2,2,PUMPKIN:0)
Block(2,2,2,PUMPKIN:0)
Block(3,2,2,PUMPKIN:1)
Block(-1,2,3,PUMPKIN)
Block(0,2,3,PUMPKIN)
Block(1,2,3,PUMPKIN:1)
Block(2,2,3,PUMPKIN:1)
Block(3,2,3,161:1)
Block(0,2,4,161:1)
Block(1,2,4,161:1)
Block(-1,3,-3,PUMPKIN:0)
Block(0,3,-3,PUMPKIN:0)
Block(1,3,-3,PUMPKIN:0)
Block(2,3,-3,PUMPKIN:0)
Block(3,3,-3,PUMPKIN:1)
Block(-2,3,-2,PUMPKIN:0)
Block(1,3,-2,PUMPKIN:0)
Block(2,3,-2,STAINED_CLAY:15)
Block(-3,3,-1,PUMPKIN:0)
Block(-2,3,-1,LOG_2:1)
Block(-1,3,-1,WEB)
Block(3,3,-1,PUMPKIN:0)
Block(-3,3,0,PUMPKIN:0)
Block(-1,3,0,LOG_2:1)
Block(3,3,0,PUMPKIN:1)
Block(-3,3,1,PUMPKIN:0)
Block(-2,3,1,LOG_2:9)
Block(0,3,1,LOG_2:9)
Block(2,3,1,STAINED_CLAY:15)
Block(-3,3,2,PUMPKIN)
Block(-2,3,2,PUMPKIN:1)
Block(0,3,2,PUMPKIN:1)
Block(1,3,2,PUMPKIN:1)
Block(2,3,2,PUMPKIN:0)
Block(3,3,2,PUMPKIN:0)
Block(-1,3,3,PUMPKIN)
Block(1,3,3,WEB)
Block(2,3,3,PUMPKIN)
Block(3,3,3,PUMPKIN:1)
Block(-1,4,-3,PUMPKIN:3)
Block(0,4,-3,PUMPKIN:0)
Block(1,4,-3,PUMPKIN:0)
Block(2,4,-3,PUMPKIN:0)
Block(3,4,-3,PUMPKIN:1)
Block(-2,4,-2,PUMPKIN:0)
Block(1,4,-2,PUMPKIN:0)
Block(2,4,-2,PUMPKIN:0)
Block(3,4,-2,PUMPKIN)
Block(-3,4,-1,PUMPKIN:0)
Block(-2,4,-1,LOG_2:9)
Block(-1,4,-1,LOG_2:9)
Block(3,4,-1,PUMPKIN:0)
Block(-3,4,0,PUMPKIN)
Block(-2,4,0,LOG_2:5)
Block(-1,4,0,LOG_2:5)
Block(0,4,0,LOG_2:1)
Block(3,4,0,PUMPKIN:1)
Block(-3,4,1,WEB)
Block(-2,4,1,PUMPKIN:0)
Block(1,4,1,WEB)
Block(2,4,1,STAINED_CLAY:15)
Block(-2,4,2,PUMPKIN)
Block(-1,4,2,LOG_2:5)
Block(0,4,2,LOG_2:5)
Block(1,4,2,PUMPKIN:1)
Block(2,4,2,STAINED_CLAY:15)
Block(-1,4,3,PUMPKIN)
Block(0,4,3,PUMPKIN:1)
Block(2,4,3,PUMPKIN)
Block(3,4,3,PUMPKIN:1)
Block(0,5,-3,PUMPKIN:0)
Block(1,5,-3,PUMPKIN:0)
Block(-2,5,-2,PUMPKIN:0)
Block(-1,5,-2,PUMPKIN:0)
Block(0,5,-2,PUMPKIN:0)
Block(1,5,-2,PUMPKIN:0)
Block(2,5,-2,PUMPKIN:0)
Block(-2,5,-1,PUMPKIN:0)
Block(-1,5,-1,JACK_O_LANTERN:3)
Block(0,5,-1,LOG_2:9)
Block(1,5,-1,PUMPKIN:0)
Block(2,5,-1,PUMPKIN:0)
Block(3,5,-1,PUMPKIN:0)
Block(-2,5,0,PUMPKIN:0)
Block(0,5,0,LOG_2:1)
Block(2,5,0,PUMPKIN:0)
Block(3,5,0,PUMPKIN:0)
Block(-2,5,1,PUMPKIN:0)
Block(1,5,1,PUMPKIN:0)
Block(2,5,1,PUMPKIN:0)
Block(3,5,1,PUMPKIN:0)
Block(-2,5,2,PUMPKIN)
Block(-1,5,2,PUMPKIN:1)
Block(0,5,2,PUMPKIN:0)
Block(1,5,2,PUMPKIN:0)
Block(2,5,2,PUMPKIN:1)
Block(3,5,2,PUMPKIN:1)
Block(0,5,3,PUMPKIN)
Block(1,5,3,PUMPKIN:1)
Block(-1,6,-2,PUMPKIN:0)
Block(0,6,-2,PUMPKIN:0)
Block(1,6,-2,PUMPKIN:0)
Block(-2,6,-1,PUMPKIN:0)
Block(-1,6,-1,PUMPKIN:0)
Block(0,6,-1,JACK_O_LANTERN)
Block(1,6,-1,PUMPKIN:0)
Block(2,6,-1,PUMPKIN:0)
Block(-2,6,0,PUMPKIN:0)
Block(-1,6,0,PUMPKIN:0)
Block(0,6,0,LOG_2:1)
Block(1,6,0,PUMPKIN:0)
Block(2,6,0,PUMPKIN:0)
Block(3,6,0,PUMPKIN:1)
Block(-2,6,1,PUMPKIN)
Block(-1,6,1,PUMPKIN:0)
Block(0,6,1,PUMPKIN:0)
Block(1,6,1,PUMPKIN:1)
Block(2,6,1,PUMPKIN:1)
Block(-1,6,2,PUMPKIN)
Block(0,6,2,PUMPKIN:1)
Block(0,7,0,LOG_2:1)
Block(0,7,1,WEB)
Block(-1,8,-1,161:1)
Block(0,8,-1,LOG_2:1)
Block(-1,8,0,161:1)
Block(0,8,0,LOG_2:1)
Block(1,8,0,161:1)
Block(0,8,1,161:1)
Block(-1,9,-2,161:1)
Block(0,9,-2,WEB)
Block(-1,9,-1,161:1)
Block(0,9,-1,LOG_2:1)
Block(1,9,-1,161:1)
Block(0,9,0,161:1)
Block(0,10,-4,161:1)
Block(-1,10,-3,161:1)
Block(0,10,-3,LOG_2:1)
Block(1,10,-3,161:1)
Block(-1,10,-2,WEB)
Block(0,10,-2,161:1)
Block(1,10,-2,161:1)
Block(0,10,-1,161:1)
Block(3,0,-4,RED_MUSHROOM)
Block(4,0,1,RED_MUSHROOM)
Block(-1,1,-3,RED_MUSHROOM)
Block(0,4,1,RED_MUSHROOM)
Block(0,3,-2,RED_MUSHROOM)
Block(4,1,-2,RED_MUSHROOM)
Block(-1,1,1,RED_MUSHROOM)
Block(-4,1,2,BROWN_MUSHROOM)
Block(-2,1,4,BROWN_MUSHROOM)
Block(2,2,0,BROWN_MUSHROOM)
Block(0,1,0,BROWN_MUSHROOM)
Block(-1,1,-1,BROWN_MUSHROOM)
Block(-4,2,1,BROWN_MUSHROOM)
Block(3,5,-2,BROWN_MUSHROOM)
Block(-2,7,0,BROWN_MUSHROOM)
Block(-4,0,-2,BROWN_MUSHROOM)
Block(-3,0,-3,BROWN_MUSHROOM)
Block(2,7,0,BROWN_MUSHROOM)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 checks                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Require a condition at a certain location in order for the BO3 to be spawned.
# BlockCheck(x,y,z,BlockName[,BlockName[,...]]) - one of the blocks must be at the location
# BlockCheckNot(x,y,z,BlockName[,BlockName[,...]]) - all the blocks must not be at the location
# LightCheck(x,y,z,minLightLevel,maxLightLevel) - light must be between min and max (inclusive)

# You can use "Solid" as a BlockName for matching all solid blocks or "All" to match all blocks that aren't air.

# Examples:
#   BlockCheck(0,-1,0,GRASS,DIRT)  Require grass or dirt just below the object
#   BlockCheck(0,-1,0,Solid)       Require any solid block just below the object
#   BlockCheck(0,-1,0,WOOL)        Require any type of wool just below the object
#   BlockCheck(0,-1,0,WOOL:0)      Require white wool just below the object
#   BlockCheckNot(0,-1,0,WOOL:0)   Require that there is no white wool below the object
#   LightCheck(0,0,0,0,1)          Require almost complete darkness just below the object

#######################################################################
# +-----------------------------------------------------------------+ #
# |                             Branches                            | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Branches are objects that will spawn when this object spawns when it is used in
# the CustomStructure resource. Branches can also have branches, making complex
# structures possible. See the wiki for more details.

# Regular Branches spawn each branch with an independent chance of spawning.
# Branch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][IndividualChance])
# branchName - name of the object to spawn.
# rotation - NORTH, SOUTH, EAST or WEST.
# IndividualChance - The chance each branch has to spawn, assumed to be 100 when left blank

# Weighted Branches spawn branches with a dependent chance of spawning.
# WeightedBranch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][MaxChanceOutOf])
# MaxChanceOutOf - The chance all branches have to spawn out of, assumed to be 100 when left blank
